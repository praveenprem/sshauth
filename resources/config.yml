# Base system parameters. These configurations defines which service to use and how should system treat service roles
# @param {required} name:
#                         Is the given name of the machine. Used with alerts as an identifier.
# @param {required} service:
#                            Defines which service should be used and "method" below may only apply to some services.
# @param {required/optional} method:
#                                    Is used to decide how users are selected. I.E, on GitHub methods "team" and "org"
#                                    can be used these dictate, whether the user should be picked by given team or
#                                    organisation wide. This is service specific
# @param {required} admin_user:
#                               Is the local machine user with "sudo" access. This user is used with certain service's
#                               role to filter users to authenticate against. I.E this user is used with GitHub's
#                               "admin_role" only, therefor not all users allowed to login as this user.
# @param {required} default_user:
#                                 Is the local machine user without sudo access and used with certain service's role
#                                 only to filter the users to authenticate against. I.E this is used with GitHub's
#                                 "default_role" and any user with this role is allowed to login as normal user.
system_conf:
# Possible value: any name
  name:
#  Possible values: github, bitbucket, database
  service:
# Possible values: team, org
  method:
#  Possible values: any user of the local system (root, ubuntu, etc)
  admin_user:
#  Possible values: any user of the local system (root, ubuntu, etc)
  default_user:



# GitHub based authentication required parameters. These configuration defines and give data to access secure systems
# and some parameters are used in conjunction with the "system_conf" above.
# @param {required} access_token:
#                               Is used to authenticate with GitHub to allow system to fetch relevant data from the
#                               service. This token is from the one of the user's "Personal access tokens" of the
#                               Organisation. Recommended to use organisation "Owner's" account, as if this user leaves
#                               Organisation, this will fail!
# @param {required} org:
#                        Is the unique ID of the organisation to used to fetch the members from. Can be found on the URL
#                        on the HomePage if the organisation or when visiting a team (@OrgName/teamName).
# @param {required/optional} team_name:
#                                       Is used in conjunction with "system_conf.method" above and only applicable if
#                                       "team" is chosen as parameter. Can be found on the Homepage of the team below
#                                        logo. I.E. @OrgName/teamName
github:
# Personal access token of a permanent user (owner) of the Organisation. First user is recommended
  access_token:
#  Team (maintainer,member,all) / Org (admin,member,all)
  admin_role:
#  Used with "default_user". Same as "admin_role"
  default_role:
#  Unique Organisation identifier. Can be found on the URL when viewing Org homepage. I.E https://github.com/{github}
  org:
#  Any team name in the Organisation. Can be found on the Homepage of the team below logo. I.E. @OrgName/teamName
  team_name:


# TODO Implement SQL server based authentication
# SQL server based authentication if public service (GitHub/BitBucket) based authentication is not an option for security
# or any other reasons. These configurations can be used to make any SQL database server as an authentication service
# provider. Preferably a MySQL databases.
# @param {required} host:
#                         IP Address/URL for direct connection to database.
# @param {required} user:
#                         Username to authenticate against the database. Recommended use read only user for this.
# @param {required} password:
#                          Password to authenticate the with above user.
# @param {required} database:
#                            Database name that has below table.
# @param {required} table:
#                          Table name that contains necessary data to successfully authenticate
sql:
  host:
  user:
  password:
  database:
  table:


# Service used to notify when a connection has successfully authenticated and grant access to the system. Alerting is
# not considered as a mission critical system, if alert system fails to send alert warning message will be logged and
# system will continue with the authentication process.
# @param {optional} slack:
#                          Slack Incoming Webhooks is used to send the alert.
# @param {optional} hipchat:
#                            HipChat Send room notification mechanism is used to send alert.
#      @param {required} url: URL to post the alert.
#      @param {required} token: Authentication token to validate the request is authorised to access the HipChat server.
alerts:
  slack:
#  TODO Implement HipChat alerting
  hipchat:
    url:
    token: