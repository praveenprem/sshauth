# Base system parameters. These configurations defines which service to use and how should system treat service roles
# @param {required} name:
#                         Is the given name of the machine. Used with alerts as an identifier.
# @param {required} service:
#                            Defines which service should be used and "method" below may only apply to some services.
# @param {required/optional} method:
#                                    Is used to decide how users are selected. I.E, on GitHub methods "team" and "org"
#                                    can be used these dictate, whether the user should be picked by given team or
#                                    organisation wide. This is service specific
# @param {required} admin_user:
#                               Is the local machine user with "sudo" access. This user is used with certain service's
#                               role to filter users to authenticate against. I.E this user is used with GitHub's
#                               "admin_role" only, therefor not all users allowed to login as this user.
# @param {required} default_user:
#                                 Is the local machine user without sudo access and used with certain service's role
#                                 only to filter the users to authenticate against. I.E this is used with GitHub's
#                                 "default_role" and any user with this role is allowed to login as normal user.
system_conf:
# Possible value: any name
  name:
#  Possible values: github, gitlab, bitbucket, database
  service:
# Possible values: team, org, group
  method:
#  Possible values: any user of the local system (root, ubuntu, etc)
  admin_user:
#  Possible values: any user of the local system (root, ubuntu, etc)
  default_user:



# GitHub based authentication required parameters. These configuration defines and give data to access secure systems
# and some parameters are used in conjunction with the "system_conf" above.
# @param {required} access_token:
#                               Is used to authenticate with GitHub to allow system to fetch relevant data from the
#                               service. This token is from the one of the user's "Personal access tokens" of the
#                               Organisation. Recommended to use organisation "Owner's" account, as if this user leaves
#                               Organisation, this will fail!
# @param {required} org:
#                        Is the unique ID of the organisation to used to fetch the members from. Can be found on the URL
#                        on the HomePage if the organisation or when visiting a team (@OrgName/teamName).
# @param {required/optional} team_name:
#                                       Is used in conjunction with "system_conf.method" above and only applicable if
#                                       "team" is chosen as parameter. Can be found on the Homepage of the team below
#                                        logo. I.E. @OrgName/teamName
# @param {required} admin_role:
#                             This is used in conjunction with the "system_conf.admin_user", where all the users with
#                             Given role can login as admin_user.
# @param {required} default_role:
#                             This is used in conjunction with the "system_conf.default_user", where all the users with
#                             Given role can login as default_user.
github:
# Personal access token of a permanent user (owner) of the Organisation. First user is recommended
  access_token:
#  Team (maintainer,member,all) / Org (admin,member,all)
  admin_role:
#  Used with "default_user". Same as "admin_role"
  default_role:
#  Unique Organisation identifier. Can be found on the URL when viewing Org homepage. I.E https://github.com/{github}
  org:
#  Any team name in the Organisation. Can be found on the Homepage of the team below logo. I.E. @OrgName/teamName
  team_name:


# Self-Hosted GitLab server based authentication. Following configuration can be used to allow users to authenticate
# against self-hosted GitLab server as public server does not allow users to assume administrator role, therefore script
# is unable to access users information through API.
# @param {required} org_url:
#                           FQDN of the Gitlab server. I.E https://gitlab.test.com
# @param {required} access_token:
#                               Access token from a user with Administration privileges. Minimum of following scopes
#                               required for this system to function.
#                               scopes: api, read_user, sudo
# @param {required/optional} group_name:
#                                      Is used in conjunction with "system_conf.method" above and only applicable if
#                                      "group" is chosen as parameter. This can be any group from the GitLab server
# @param {required} admin_role:
#                              This is used in conjunction with the "system_conf.admin_user", where all the users with
#                              Given role can login as admin_user.
# @param {required} default_role:
#                              This is used in conjunction with the "system_conf.default_user", where all the users with
#                              Given role can login as default_user.
# @param {required/optional} inherit_permission:
#                                              Following parameters are optional and only used to allow with equal role,
#                                              lower or higher is allowed to login as given user. "admin_user" and
#                                              "default_user" is referring to the relationship with above roles and
#                                               system_conf users.
# @param {required/optional} admin_user:
#                                        Boolean value is accepted, default to false and if left false users assigned to
#                                        the "admin_role" can login as "system_conf.admin_user".
#                                        If true "admin_stack" must be defined.
# @param {required/optional} admin_stack:
#                                      This is only required if the "inherit_permission.admin_user" is set to true. Only
#                                      possible values are "up" or "down". "up" will give assess to users with
#                                      "admin_role" and lower permission. I.E if "admin_role" is set to "Reporter" with
#                                      "admin_stack" set to "up", this will allow any user with "Reporter" or "Guest"
#                                      permission to connect. Down does the opposite.
# @param {required/optional} default_user:
#                                        Boolean value is accepted, default to false and if left false users assigned to
#                                        the "default_role" can login as "system_conf.default_user".
#                                        If true "default_stack" must be defined.
# @param {required/optional} default_stack:
#                                      This is only required if the "inherit_permission.default_user" is set to true.
#                                      Only possible values are "up" or "down". "down" will give assess to users with
#                                      "default_role" and higher permission. I.E if "default_role" is set to "Master" with
#                                      "admin_stack" set to "down", this will allow any user with "Master" or "Owner"
#                                      permission to connect. Up does the opposite.
gitlab:
# Fully Qualified Domain Name of the GitLab Self-Hosted server.
  org_url:
# Personal access token of the GitLab owner. Recommended to use the "root" account.
  access_token:
# Any GitLab group name from the GitLab server above.
  group_name:
# Org (admin, member, all) / Group (owner, master, developer, reporter, guest)
  admin_role:
# Org (admin, member, all) / Group (owner, master, developer, reporter, guest)
  default_role:
  inherit_permission:
#   True / False
    admin_user:
#   up / down (recommended)
    admin_stack:
#   True / False
    default_user:
#   up / down (recommended)
    default_stack:

# TODO To be implement SQL server based authentication
# SQL server based authentication if public service (GitHub/BitBucket) based authentication is not an option for security
# or any other reasons. These configurations can be used to make any SQL database server as an authentication service
# provider. Preferably a MySQL databases.
# @param {required} host:
#                         IP Address/URL for direct connection to database.
# @param {required} user:
#                         Username to authenticate against the database. Recommended use read only user for this.
# @param {required} password:
#                          Password to authenticate the with above user.
# @param {required} database:
#                            Database name that has below table.
# @param {required} table:
#                          Table name that contains necessary data to successfully authenticate
sql:
  host:
  user:
  password:
  database:
  table:


# Service used to notify when a connection has successfully authenticated and grant access to the system. Alerting is
# not considered as a mission critical system, if alert system fails to send alert warning message will be logged and
# system will continue with the authentication process.
# @param {optional} slack:
#                          Slack Incoming Webhooks is used to send the alert.
# @param {optional} hipchat:
#                            HipChat Send room notification mechanism is used to send alert.
#      @param {required} url: URL to post the alert.
#      @param {required} token: Authentication token to validate the request is authorised to access the HipChat server.
alerts:
  slack:
#  TODO HipChat to be implement alerting
  hipchat:
    url:
    token: